{
  "agents": [
    {
      "role": "coordinator",
      "responsibilities": [
        "Orchestrate overall workflow execution",
        "Manage task distribution among agents",
        "Handle escalation and conflict resolution",
        "Coordinate with external systems (Revit, databases)",
        "Generate executive reports and dashboards",
        "Manage system configuration and updates"
      ],
      "tools": [
        "workflow_orchestrator",
        "task_dispatcher",
        "agent_monitor",
        "escalation_manager",
        "report_generator",
        "config_manager"
      ],
      "communication_protocols": [
        "message_queue",
        "api_endpoint"
      ],
      "scaling_requirements": {
        "cpu_cores": 4,
        "memory_gb": 8,
        "instances": 1,
        "auto_scale": false
      },
      "dependencies": [
        "message_queue_service",
        "database",
        "external_apis"
      ],
      "performance_requirements": {
        "max_response_time_ms": 500,
        "throughput_tasks_per_minute": 100,
        "availability_percentage": 99.9
      }
    },
    {
      "role": "scraper",
      "responsibilities": [
        "Autonomous web scraping with adaptive strategies",
        "Handle anti-bot detection and circumvention",
        "Implement dynamic retry mechanisms",
        "Manage concurrent scraping sessions",
        "Detect and adapt to website changes",
        "Cache and optimize repeated requests"
      ],
      "tools": [
        "adaptive_scraper",
        "stealth_configuration",
        "proxy_manager",
        "cache_manager",
        "site_analyzer",
        "retry_coordinator"
      ],
      "communication_protocols": [
        "message_queue",
        "event_stream"
      ],
      "scaling_requirements": {
        "cpu_cores": 2,
        "memory_gb": 4,
        "instances": "3-10",
        "auto_scale": true
      },
      "dependencies": [
        "browser_engine",
        "proxy_service",
        "cache_service"
      ],
      "performance_requirements": {
        "max_response_time_ms": 30000,
        "success_rate_percentage": 85,
        "concurrent_sessions": 5
      }
    },
    {
      "role": "validator",
      "responsibilities": [
        "Real-time content validation and quality assessment",
        "Anomaly detection across product extractions",
        "Consistency checking between related products",
        "Data integrity verification",
        "Confidence scoring and threshold management",
        "Generate validation reports and recommendations"
      ],
      "tools": [
        "content_validator",
        "anomaly_detector",
        "consistency_checker",
        "integrity_verifier",
        "confidence_scorer",
        "validation_reporter"
      ],
      "communication_protocols": [
        "direct_call",
        "event_stream"
      ],
      "scaling_requirements": {
        "cpu_cores": 2,
        "memory_gb": 3,
        "instances": "2-5",
        "auto_scale": true
      },
      "dependencies": [
        "ml_models",
        "reference_database"
      ],
      "performance_requirements": {
        "max_response_time_ms": 2000,
        "throughput_validations_per_minute": 60,
        "accuracy_percentage": 90
      }
    },
    {
      "role": "investigator",
      "responsibilities": [
        "Deep-dive analysis for complex cases",
        "Alternative source investigation",
        "Manual research coordination",
        "Product specification research",
        "Manufacturer database queries",
        "Cross-reference verification"
      ],
      "tools": [
        "deep_analyzer",
        "source_investigator",
        "manual_research_coordinator",
        "spec_researcher",
        "manufacturer_query",
        "cross_reference_tool"
      ],
      "communication_protocols": [
        "api_endpoint",
        "message_queue"
      ],
      "scaling_requirements": {
        "cpu_cores": 3,
        "memory_gb": 6,
        "instances": "1-3",
        "auto_scale": true
      },
      "dependencies": [
        "external_databases",
        "manufacturer_apis",
        "research_tools"
      ],
      "performance_requirements": {
        "max_response_time_ms": 120000,
        "success_rate_percentage": 70,
        "investigation_depth": "comprehensive"
      }
    },
    {
      "role": "quality_assessor",
      "responsibilities": [
        "System-wide quality monitoring",
        "Performance trend analysis",
        "Continuous improvement recommendations",
        "Quality threshold management",
        "Benchmark comparison and reporting",
        "Quality prediction and early warning"
      ],
      "tools": [
        "quality_monitor",
        "trend_analyzer",
        "improvement_recommender",
        "threshold_manager",
        "benchmark_comparator",
        "quality_predictor"
      ],
      "communication_protocols": [
        "event_stream",
        "api_endpoint"
      ],
      "scaling_requirements": {
        "cpu_cores": 2,
        "memory_gb": 4,
        "instances": 1,
        "auto_scale": false
      },
      "dependencies": [
        "analytics_database",
        "ml_platform"
      ],
      "performance_requirements": {
        "max_response_time_ms": 5000,
        "analysis_frequency": "continuous",
        "prediction_accuracy": 80
      }
    },
    {
      "role": "resolver",
      "responsibilities": [
        "Automated issue resolution",
        "Conflict mediation between agents",
        "Error recovery and system healing",
        "Workflow optimization",
        "Resource allocation management",
        "Emergency response coordination"
      ],
      "tools": [
        "issue_resolver",
        "conflict_mediator",
        "error_recovery",
        "workflow_optimizer",
        "resource_allocator",
        "emergency_coordinator"
      ],
      "communication_protocols": [
        "message_queue",
        "direct_call"
      ],
      "scaling_requirements": {
        "cpu_cores": 2,
        "memory_gb": 4,
        "instances": 1,
        "auto_scale": false
      },
      "dependencies": [
        "system_monitoring",
        "resource_manager"
      ],
      "performance_requirements": {
        "max_response_time_ms": 1000,
        "resolution_rate_percentage": 85,
        "mttr_minutes": 5
      }
    }
  ],
  "communication_patterns": {
    "coordination_flow": {
      "description": "Primary workflow coordination",
      "pattern": "coordinator -> scraper -> validator -> coordinator",
      "protocol": "message_queue",
      "retry_mechanism": "exponential_backoff",
      "timeout_ms": 30000
    },
    "escalation_flow": {
      "description": "Issue escalation and resolution",
      "pattern": "any_agent -> resolver -> coordinator",
      "protocol": "direct_call",
      "retry_mechanism": "immediate",
      "timeout_ms": 5000
    },
    "investigation_flow": {
      "description": "Deep investigation workflow",
      "pattern": "validator -> investigator -> quality_assessor",
      "protocol": "api_endpoint",
      "retry_mechanism": "linear_backoff",
      "timeout_ms": 120000
    },
    "monitoring_flow": {
      "description": "Continuous quality monitoring",
      "pattern": "all_agents -> quality_assessor -> coordinator",
      "protocol": "event_stream",
      "retry_mechanism": "none",
      "timeout_ms": 1000
    }
  },
  "tool_requirements": [
    {
      "name": "adaptive_scraper",
      "category": "web_scraping",
      "description": "Intelligent web scraper with adaptive strategies",
      "capabilities": [
        "Multi-method fallback (requests -> selenium -> firecrawl)",
        "Dynamic user agent rotation",
        "Proxy management and rotation",
        "Rate limiting with intelligent backoff",
        "Content change detection",
        "JavaScript rendering"
      ],
      "integration_requirements": [
        "Browser automation framework",
        "Proxy service API",
        "Content caching layer"
      ],
      "performance_specs": {
        "concurrent_sessions": 10,
        "success_rate_target": 90,
        "avg_response_time_ms": 5000
      }
    },
    {
      "name": "anomaly_detector",
      "category": "quality_assurance",
      "description": "ML-powered anomaly detection for product data",
      "capabilities": [
        "Statistical anomaly detection",
        "Pattern recognition",
        "Outlier identification",
        "Trend analysis",
        "Confidence scoring",
        "Real-time alerting"
      ],
      "integration_requirements": [
        "Machine learning framework",
        "Statistical analysis libraries",
        "Real-time data streaming"
      ],
      "performance_specs": {
        "detection_accuracy": 85,
        "false_positive_rate": 10,
        "processing_latency_ms": 500
      }
    },
    {
      "name": "workflow_orchestrator",
      "category": "coordination",
      "description": "Intelligent workflow management and orchestration",
      "capabilities": [
        "Dynamic workflow generation",
        "Task prioritization",
        "Resource allocation",
        "Dependency management",
        "Failure recovery",
        "Performance optimization"
      ],
      "integration_requirements": [
        "Workflow engine",
        "Task queue system",
        "Resource monitoring"
      ],
      "performance_specs": {
        "max_concurrent_workflows": 50,
        "task_scheduling_latency_ms": 100,
        "recovery_time_ms": 2000
      }
    },
    {
      "name": "deep_analyzer",
      "category": "investigation",
      "description": "Advanced analysis tool for complex product investigations",
      "capabilities": [
        "Multi-source data correlation",
        "Semantic analysis",
        "Image recognition",
        "Natural language processing",
        "Database cross-referencing",
        "Confidence assessment"
      ],
      "integration_requirements": [
        "NLP framework",
        "Computer vision libraries",
        "External database APIs"
      ],
      "performance_specs": {
        "analysis_depth": "comprehensive",
        "processing_time_ms": 10000,
        "accuracy_target": 85
      }
    }
  ],
  "system_dependencies": [
    {
      "name": "message_queue_service",
      "type": "infrastructure",
      "description": "High-performance message queue for agent communication",
      "options": [
        "Redis",
        "RabbitMQ",
        "Apache Kafka"
      ],
      "recommended": "Redis",
      "requirements": {
        "throughput": "10,000 messages/second",
        "latency": "<10ms",
        "persistence": "optional",
        "clustering": "required"
      },
      "scaling": {
        "strategy": "horizontal",
        "max_instances": 5
      }
    },
    {
      "name": "database_system",
      "type": "data_storage",
      "description": "Primary database for product data and system state",
      "options": [
        "PostgreSQL",
        "MongoDB",
        "CockroachDB"
      ],
      "recommended": "PostgreSQL",
      "requirements": {
        "acid_compliance": true,
        "concurrent_connections": 100,
        "storage_capacity": "100GB+",
        "backup_strategy": "continuous"
      },
      "scaling": {
        "strategy": "vertical",
        "read_replicas": 3
      }
    },
    {
      "name": "container_orchestration",
      "type": "deployment",
      "description": "Container orchestration platform for agent deployment",
      "options": [
        "Kubernetes",
        "Docker Swarm",
        "AWS ECS"
      ],
      "recommended": "Kubernetes",
      "requirements": {
        "auto_scaling": true,
        "health_monitoring": true,
        "service_discovery": true,
        "load_balancing": true
      },
      "scaling": {
        "strategy": "hybrid",
        "node_auto_scaling": true
      }
    },
    {
      "name": "ml_platform",
      "type": "ai_services",
      "description": "Machine learning platform for model training and inference",
      "options": [
        "MLflow",
        "Kubeflow",
        "AWS SageMaker"
      ],
      "recommended": "MLflow",
      "requirements": {
        "model_versioning": true,
        "experiment_tracking": true,
        "model_serving": true,
        "gpu_support": "optional"
      },
      "scaling": {
        "strategy": "vertical",
        "gpu_instances": "on_demand"
      }
    },
    {
      "name": "monitoring_stack",
      "type": "observability",
      "description": "Comprehensive monitoring and observability stack",
      "options": [
        "Prometheus+Grafana",
        "ELK Stack",
        "DataDog"
      ],
      "recommended": "Prometheus+Grafana",
      "requirements": {
        "metrics_collection": true,
        "log_aggregation": true,
        "alerting": true,
        "dashboards": true
      },
      "scaling": {
        "strategy": "horizontal",
        "retention_days": 30
      }
    }
  ],
  "deployment_strategy": {
    "deployment_environments": {
      "development": {
        "description": "Local development environment",
        "infrastructure": "Docker Compose",
        "scaling": "fixed",
        "monitoring": "basic",
        "agents": {
          "instances": 1,
          "resources": "minimal"
        }
      },
      "staging": {
        "description": "Pre-production testing environment",
        "infrastructure": "Kubernetes cluster (single node)",
        "scaling": "manual",
        "monitoring": "comprehensive",
        "agents": {
          "instances": 2,
          "resources": "medium"
        }
      },
      "production": {
        "description": "Production environment",
        "infrastructure": "Kubernetes cluster (multi-node)",
        "scaling": "automatic",
        "monitoring": "enterprise",
        "agents": {
          "instances": "auto",
          "resources": "optimized"
        }
      }
    },
    "scaling_strategy": {
      "horizontal_scaling": {
        "enabled": true,
        "triggers": [
          "cpu_usage > 70%",
          "queue_depth > 100",
          "response_time > 5s"
        ],
        "max_instances": 20,
        "scale_up_cooldown": "5m",
        "scale_down_cooldown": "10m"
      },
      "vertical_scaling": {
        "enabled": true,
        "triggers": [
          "memory_usage > 85%",
          "cpu_wait > 20%"
        ],
        "max_resources": {
          "cpu": "8 cores",
          "memory": "16GB"
        },
        "adjustment_percentage": 25
      }
    },
    "deployment_pipeline": {
      "stages": [
        "code_commit",
        "automated_testing",
        "security_scanning",
        "container_build",
        "staging_deployment",
        "integration_testing",
        "production_deployment",
        "health_monitoring"
      ],
      "rollback_strategy": "automatic",
      "canary_deployment": true,
      "blue_green_deployment": true
    },
    "disaster_recovery": {
      "backup_strategy": "continuous",
      "recovery_time_objective": "4 hours",
      "recovery_point_objective": "15 minutes",
      "multi_region": true,
      "failover_automation": true
    }
  },
  "scaling_strategy": {
    "auto_scaling_enabled": true,
    "scaling_metrics": [
      "cpu_utilization",
      "memory_usage",
      "queue_depth",
      "response_time",
      "error_rate"
    ],
    "scaling_policies": {
      "scale_up_threshold": 70,
      "scale_down_threshold": 30,
      "cooldown_period_minutes": 5
    }
  },
  "monitoring_requirements": {
    "agent_monitoring": {
      "health_checks": "continuous",
      "performance_metrics": "real_time",
      "resource_usage": "detailed",
      "communication_tracking": "enabled"
    },
    "system_monitoring": {
      "infrastructure_metrics": "comprehensive",
      "application_logs": "structured",
      "security_monitoring": "enabled",
      "alerting": "multi_channel"
    }
  }
}