name: Build App (Windows + macOS)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - "specscraper/**"
      - "requirements*.txt"
      - "electron-app/**"
      - ".github/workflows/build-app-multi-os.yml"

# -------------------- Stage 1: Build Python bridges --------------------

jobs:
  win-build-bridge:
    name: Build Python Bridge (Windows)
    runs-on: windows-latest
    defaults: { run: { shell: bash } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Build PyInstaller one-dir (win)
        working-directory: specscraper
        run: |
          python -m venv .venv
          source .venv/Scripts/activate
          python -m pip install -U pip wheel
          [ -f requirements-minimal.txt ] && python -m pip install -r requirements-minimal.txt
          python -m pip install pyinstaller
          pyinstaller --noconfirm --clean --onedir --noconsole --name electron_bridge electron_bridge.py
          deactivate

      - name: Upload bridge artifact (win)
        uses: actions/upload-artifact@v4
        with:
          name: electron_bridge-win-x64
          path: specscraper/dist/electron_bridge/**
          if-no-files-found: error

  mac-build-bridge:
    name: Build Python Bridge (macOS)
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Build PyInstaller one-dir (mac)
        working-directory: specscraper
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          python -m pip install -U pip wheel
          [ -f requirements-minimal.txt ] && python -m pip install -r requirements-minimal.txt
          python -m pip install pyinstaller
          pyinstaller --noconfirm --clean --onedir --noconsole --name electron_bridge electron_bridge.py
          deactivate

      - name: Upload bridge artifact (mac)
        uses: actions/upload-artifact@v4
        with:
          name: electron_bridge-mac
          path: specscraper/dist/electron_bridge/**
          if-no-files-found: error

# -------------------- Stage 2: Build Electron apps --------------------

  win-build-electron:
    name: Build Electron App (Windows)
    runs-on: windows-latest
    needs: [win-build-bridge]
    defaults: { run: { shell: bash } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: electron-app/package-lock.json

      # Download the Windows bridge to electron-app/resources/python/electron_bridge
      - name: Download bridge artifact (win)
        uses: actions/download-artifact@v4
        with:
          name: electron_bridge-win-x64
          path: electron-app/resources/python/electron_bridge

      # Sanity-check the bridge is really there (path must match extraResources.from)
      - name: Verify downloaded bridge
        run: |
          echo "Listing electron bridge contents:"
          ls -laR electron-app/resources/python/electron_bridge || true

      - name: Install deps
        working-directory: electron-app
        run: |
          npm ci
        env:
          npm_config_target_platform: win32
          npm_config_target_arch: x64
          npm_config_disturl: https://electronjs.org/headers
          npm_config_runtime: electron
          npm_config_cache: /tmp/.npm
          npm_config_target: 37.2.4

      - name: Build renderer/main
        working-directory: electron-app
        run: |
          npm run build:main
          npm run build:renderer

      - name: Verify build output
        working-directory: electron-app
        run: |
          ls -la dist/
          ls -la dist/main/
          test -f dist/main/index.js || { echo "❌ dist/main/index.js missing!"; exit 1; }
          echo "✅ Build verification passed"

      # Rebuild native modules against Electron 37 for Windows x64
      - name: Rebuild native modules for Electron
        working-directory: electron-app
        run: npx @electron/rebuild --version=37.2.4 --arch=x64

      - name: Package Windows app (unsigned)
        working-directory: electron-app
        run: npx electron-builder --win
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: "false"

      - name: Upload Windows app artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-windows-dist
          path: |
            electron-app/dist/win-*/**
            electron-app/dist/*.zip
            electron-app/dist/*.exe
          if-no-files-found: error

  mac-build-electron:
    name: Build Electron App (macOS)
    runs-on: macos-latest
    needs: [mac-build-bridge]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: electron-app/package-lock.json

      # Download the mac bridge to electron-app/resources/python/electron_bridge
      - name: Download bridge artifact (mac)
        uses: actions/download-artifact@v4
        with:
          name: electron_bridge-mac
          path: electron-app/resources/python/electron_bridge

      # Quick sanity check so we fail early if the artifact path is wrong/empty
      - name: Verify downloaded bridge
        run: |
          echo "Listing electron bridge contents:"
          ls -laR electron-app/resources/python/electron_bridge || true

      - name: Install deps
        working-directory: electron-app
        run: |
          npm ci --ignore-scripts
        env:
          npm_config_target_platform: darwin
          npm_config_target_arch: x64
          npm_config_disturl: https://electronjs.org/headers
          npm_config_runtime: electron
          npm_config_cache: /tmp/.npm
          npm_config_target: 37.2.4

      - name: Build renderer/main
        working-directory: electron-app
        run: |
          npm run build:main
          npm run build:renderer

      - name: Verify build output
        working-directory: electron-app
        run: |
          ls -la dist/
          ls -la dist/main/
          test -f dist/main/index.js || { echo "❌ dist/main/index.js missing!"; exit 1; }
          echo "✅ Build verification passed"

      # Rebuild native modules against Electron 37 for macOS x64
      - name: Rebuild native modules for Electron
        working-directory: electron-app
        run: npx @electron/rebuild --version=37.2.4 --arch=x64

      - name: Package macOS app (unsigned)
        working-directory: electron-app
        run: npx electron-builder --mac --x64
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: "false"

      - name: Upload macOS app artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-macos-dist
          path: |
            electron-app/dist/*.dmg
            electron-app/dist/*.zip
            electron-app/dist/mac/**
          if-no-files-found: warn
