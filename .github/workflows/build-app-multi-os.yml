name: Build App (Windows + macOS)

on:
  workflow_dispatch: {}
  # push:
  #   branches: [ main ]
  #   paths:
  #     - "specscraper/**"
  #     - "requirements*.txt"
  #     - "electron-app/**"
  #     - ".github/workflows/build-app-multi-os.yml"
  pull_request:
    branches: [ main ]

# -------------------- Stage 1: Build Python bridges --------------------

jobs:
#  win-build-bridge:
#    name: Build Python Bridge (Windows x64)
#    runs-on: windows-latest
#    defaults: { run: { shell: bash } }
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-python@v5
#        with: { python-version: "3.11" }
#
#      - name: Cache pip
#        uses: actions/cache@v4
#        with:
#          path: ~/.cache/pip
#          key: ${{ runner.os }}-pip-${{ hashFiles('specscraper/requirements*.txt') }}
#          restore-keys: ${{ runner.os }}-pip-
#
#      - name: Build PyInstaller (win x64)
#        working-directory: specscraper
#        run: |
#          python -m venv .venv
#          source .venv/Scripts/activate
#          python -m pip install -U pip wheel
#          [ -f requirements-minimal.txt ] && python -m pip install -r requirements-minimal.txt
#          python -m pip install pyinstaller
#          pyinstaller --noconfirm --clean --onedir --noconsole --name electron_bridge electron_bridge.py
#          deactivate
#
#      - name: Upload bridge (win x64)
#        uses: actions/upload-artifact@v4
#        with:
#          name: electron_bridge-win-x64
#          path: specscraper/dist/electron_bridge/**

  # mac-build-bridge:
    # name: Build Python Bridge (macOS x64)
    # runs-on: macos-13   # Intel runner so the bridge is truly x64
    # steps:
    #   - uses: actions/checkout@v4
    #   - uses: actions/setup-python@v5
    #     with: { python-version: "3.11" }

    #   - name: Cache pip
    #     uses: actions/cache@v4
    #     with:
    #       path: ~/.cache/pip
    #       key: ${{ runner.os }}-pip-${{ hashFiles('specscraper/requirements*.txt') }}
    #       restore-keys: ${{ runner.os }}-pip-

    #   - name: Build PyInstaller (mac x64)
    #     working-directory: specscraper
    #     run: |
    #       python3 -m venv .venv
    #       source .venv/bin/activate
    #       python -m pip install -U pip wheel
    #       [ -f requirements-minimal.txt ] && python -m pip install -r requirements-minimal.txt
    #       python -m pip install pyinstaller
    #       pyinstaller --noconfirm --clean --onedir --noconsole --name electron_bridge electron_bridge.py
    #       deactivate

    #   - name: Upload bridge (mac x64)
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: electron_bridge-mac-x64
    #       path: specscraper/dist/electron_bridge/**
    #       if-no-files-found: error

  win-build-bridge:
    name: Build Python Bridge (Windows x64)
    runs-on: windows-latest
    defaults: { run: { shell: bash } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Compute cache key
        id: bridge_key
        run: |
          echo "key=${{ runner.os }}-pybridge-${{ hashFiles('specscraper/electron_bridge.py', 'specscraper/requirements-minimal.txt') }}" >> $GITHUB_OUTPUT

      - name: Restore built bridge (if unchanged)
        uses: actions/cache@v4
        id: bridge_cache
        with:
          path: specscraper/dist/electron_bridge
          key: ${{ steps.bridge_key.outputs.key }}

      - name: Restore .venv (for faster installs)
        uses: actions/cache@v4
        with:
          path: specscraper/.venv
          key: ${{ runner.os }}-venv-${{ hashFiles('specscraper/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-venv-

      - name: Build PyInstaller (win x64)
        if: steps.bridge_cache.outputs.cache-hit != 'true'
        working-directory: specscraper
        run: |
          python -m venv .venv
          source .venv/Scripts/activate
          python -m pip install -U pip wheel
          [ -f requirements-minimal.txt ] && python -m pip install -r requirements-minimal.txt
          python -m pip install pyinstaller
          pyinstaller --noconfirm --clean --onedir --noconsole --name electron_bridge electron_bridge.py
          deactivate

      - name: Save built bridge to cache
        if: steps.bridge_cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: specscraper/dist/electron_bridge
          key: ${{ steps.bridge_key.outputs.key }}

      - name: Upload bridge (win x64)
        uses: actions/upload-artifact@v4
        with:
          name: electron_bridge-win-x64
          path: specscraper/dist/electron_bridge/**


  # -------- Stage 2: Build Electron apps (Windows, cache-first native flow) --------
  win-build-electron:
    name: Build Electron App (Windows)
    runs-on: windows-latest
    needs: [ win-build-bridge ]
    defaults: { run: { shell: bash } }

    # Tell npm we're targeting Electron (so native deps look for Electron headers)
    env:
      npm_config_runtime: electron
      npm_config_target: 37.2.4
      npm_config_disturl: https://electronjs.org/headers
      npm_config_arch: x64
      ELECTRON_CACHE: ${{ runner.temp }}\.electron
      ELECTRON_BUILDER_CACHE: ${{ runner.temp }}\.cache\electron-builder
      npm_config_cache: ${{ runner.temp }}\.npm
      BETTER_SQLITE3_VERSION: v12.2.0
      # IMPORTANT: do not set npm_config_build_from_source=true

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: electron-app/package-lock.json

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Caches that speed up installs & packaging
      - name: Cache npm (tarballs)
        uses: actions/cache@v4
        with:
          path: ${{ env.npm_config_cache }}
          key: npm-${{ runner.os }}-${{ hashFiles('electron-app/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Cache Electron downloads
        uses: actions/cache@v4
        with:
          path: ${{ env.ELECTRON_CACHE }}
          key: ebin-${{ runner.os }}-${{ env.npm_config_target }}
          restore-keys: |
            ebin-${{ runner.os }}-

      - name: Cache electron-builder
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.ELECTRON_BUILDER_CACHE }}
            C:\Users\runneradmin\AppData\Local\electron\Cache
          key: eb-${{ runner.os }}-${{ hashFiles('electron-app/package.json', 'electron-app/electron-builder.yml') }}
          restore-keys: |
            eb-${{ runner.os }}-

      - name: Cache node-gyp headers (in case we have to compile)
        uses: actions/cache@v4
        with:
          path: |
            C:\Users\runneradmin\AppData\Local\node-gyp
            C:\Users\runneradmin\.node-gyp
          key: gyp-${{ runner.os }}-elec${{ env.npm_config_target }}-${{ hashFiles('electron-app/package-lock.json') }}
          restore-keys: |
            gyp-${{ runner.os }}-

      # --- Bring in your Python bridge produced in Stage 1 ---
      - name: Download bridge (win)
        uses: actions/download-artifact@v4
        with:
          name: electron_bridge-win-x64
          path: electron-app/resources/python/electron_bridge

      - name: Verify downloaded bridge
        run: |
          echo "Listing electron bridge contents:"
          ls -laR electron-app/resources/python/electron_bridge || true

      # --- Install JS deps (no forced from-source builds) ---
      - name: Install deps
        working-directory: electron-app
        run: npm ci --prefer-offline --no-audit --no-fund

      # --- Determine ABI for cache keying ---
      - name: Get Electron ABI
        id: abi
        working-directory: electron-app
        run: |
          ABI=$(ELECTRON_RUN_AS_NODE=1 npx electron -e "process.stdout.write(process.versions.modules)")
          echo "abi=$ABI" >> $GITHUB_OUTPUT
          echo "Using ABI=$ABI"

      # --- Restore a previously rebuilt better-sqlite3.node (per ABI/OS/arch/pkg) ---
      - name: Restore better-sqlite3 native cache
        id: bs3cache
        uses: actions/cache/restore@v4
        with:
          path: electron-app/.native-cache/better-sqlite3/${{ steps.abi.outputs.abi }}/win32-x64/${{ env.BETTER_SQLITE3_VERSION }}
          key: bs3-${{ runner.os }}-abi${{ steps.abi.outputs.abi }}-x64-${{ env.BETTER_SQLITE3_VERSION }}

      - name: Use cached better-sqlite3.node if present
        if: steps.bs3cache.outputs.cache-hit == 'true'
        working-directory: electron-app
        run: |
          SRC=".native-cache/better-sqlite3/${{ steps.abi.outputs.abi }}/win32-x64/${{ env.BETTER_SQLITE3_VERSION }}/better_sqlite3.node"
          if [ -f "$SRC" ]; then
            mkdir -p node_modules/better-sqlite3/build/Release
            cp "$SRC" node_modules/better-sqlite3/build/Release/better_sqlite3.node
            echo "✅ restored cached better_sqlite3.node"
          else
            echo "⚠️ cache folder found but no .node inside"
          fi

      # --- If no cache, rebuild ONLY better-sqlite3 against Electron, then save it ---
      - name: Rebuild better-sqlite3
        if: steps.bs3cache.outputs.cache-hit != 'true'
        working-directory: electron-app
        env:
          GYP_MSVS_VERSION: "2022"
          npm_config_jobs: max
        run: |
          npx @electron/rebuild -m . -v $npm_config_target -w better-sqlite3 -f
          mkdir -p .native-cache/better-sqlite3/${{ steps.abi.outputs.abi }}/win32-x64/${{ env.BETTER_SQLITE3_VERSION }}
          cp node_modules/better-sqlite3/build/Release/*.node \
             .native-cache/better-sqlite3/${{ steps.abi.outputs.abi }}/win32-x64/${{ env.BETTER_SQLITE3_VERSION }}/better_sqlite3.node
          echo "✅ rebuilt & staged better_sqlite3.node"

      - name: Save better-sqlite3 native cache
        if: steps.bs3cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: electron-app/.native-cache/better-sqlite3/${{ steps.abi.outputs.abi }}/win32-x64/${{ env.BETTER_SQLITE3_VERSION }}
          key: bs3-${{ runner.os }}-abi${{ steps.abi.outputs.abi }}-x64-${{ env.BETTER_SQLITE3_VERSION }}

      # --- Cache TypeScript build outputs ---
      - name: Restore TypeScript build cache
        id: tscache
        uses: actions/cache/restore@v4
        with:
          path: |
            electron-app/dist/main
            electron-app/dist/renderer
          key: ts-build-${{ runner.os }}-${{ hashFiles('electron-app/src/**/*.ts') }}-${{ hashFiles('electron-app/src/**/*.tsx') }}-${{ hashFiles('electron-app/tsconfig*.json') }}-${{ hashFiles('electron-app/vite.config.*') }}-${{ hashFiles('electron-app/package.json') }}-${{ hashFiles('electron-app/package-lock.json') }}
          restore-keys: |
            ts-build-${{ runner.os }}-

      # --- Build your TS/Vite app code ---
      - name: Build renderer/main
        if: steps.tscache.outputs.cache-hit != 'true'
        working-directory: electron-app
        env:
          VITE_SOURCEMAP: "false"
        run: |
          npm run build:main
          npm run build:renderer

      - name: Verify build output
        working-directory: electron-app
        run: |
          ls -la dist/main/
          test -f dist/main/index.js || { echo "❌ dist/main/index.js missing!"; exit 1; }
          echo "✅ Build verification passed"

      - name: Save TypeScript build cache
        if: steps.tscache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            electron-app/dist/main
            electron-app/dist/renderer
          key: ts-build-${{ runner.os }}-${{ hashFiles('electron-app/src/**/*.ts') }}-${{ hashFiles('electron-app/src/**/*.tsx') }}-${{ hashFiles('electron-app/tsconfig*.json') }}-${{ hashFiles('electron-app/vite.config.*') }}-${{ hashFiles('electron-app/package.json') }}-${{ hashFiles('electron-app/package-lock.json') }}

      - name: Report cache performance
        run: |
          echo "🎯 Cache Performance Report:"
          echo "  Python Bridge: ${{ steps.bridge_cache.outputs.cache-hit == 'true' && 'HIT ✅' || 'MISS ❌' }}"
          echo "  Better-SQLite3: ${{ steps.bs3cache.outputs.cache-hit == 'true' && 'HIT ✅' || 'MISS ❌' }}"
          echo "  TypeScript Build: ${{ steps.tscache.outputs.cache-hit == 'true' && 'HIT ✅' || 'MISS ❌' }}"

      # --- Package: PRs = fast dir; main/tags = NSIS installer ---
      - name:
          Package Windows (PRs: win-unpacked)
        if: github.event_name == 'pull_request'
        working-directory: electron-app
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: "false"
        run: npx electron-builder --win dir --config.compression=store

      - name:
          Package Windows (releases: NSIS)
        if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
        working-directory: electron-app
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: "false"
        run: npx electron-builder --win nsis

      # --- Upload artifacts ---
      - name:
          Upload Windows artifact (PRs: win-unpacked)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: electron-windows-unpacked
          path: electron-app/dist/win-*/**
          if-no-files-found: error

      - name:
          Upload Windows artifact (releases: installer/zip)
        if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: electron-windows-dist
          path: |
            electron-app/dist/win-*/**
            electron-app/dist/*.zip
            electron-app/dist/*.exe
          if-no-files-found: error


  # mac-build-electron:
  #   name: Build Electron App (macOS x64)
  #   runs-on: macos-13
  #   needs: [mac-build-bridge]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"
  #         cache: "npm"
  #         cache-dependency-path: electron-app/package-lock.json

  #     - name: Download bridge (mac x64)
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: electron_bridge-mac-x64
  #         path: electron-app/resources/python/electron_bridge

  #     - name: Fix bridge permissions
  #       run: chmod +x electron-app/resources/python/electron_bridge/electron_bridge

  #     - name: Verify bridge
  #       run: ls -laR electron-app/resources/python/electron_bridge || true

  #     - name: Install deps
  #       working-directory: electron-app
  #       run: npm ci
  #       env:
  #         npm_config_runtime: electron
  #         npm_config_target: 37.2.4         # keep in sync with devDependency "electron"
  #         npm_config_disturl: https://electronjs.org/headers
  #         npm_config_arch: x64
  #         npm_config_build_from_source: true # optional: forces a local build if no prebuild exists

  #     - name: Build renderer/main
  #       working-directory: electron-app
  #       run: |
  #         npm run build:main
  #         npm run build:renderer

  #     - name: Verify build output
  #       working-directory: electron-app
  #       run: |
  #         ls -la dist/main/
  #         test -f dist/main/index.js

  #     - name: Package macOS (DMG x64)
  #       working-directory: electron-app
  #       env: { CSC_IDENTITY_AUTO_DISCOVERY: "false" }
  #       run: npx electron-builder --mac --x64

  #     - name: Upload macOS artifact (DMG only)
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: electron-macos-dist
  #         path: |
  #           electron-app/dist/*.dmg
  #           electron-app/dist/*.zip
  #           electron-app/dist/mac/**
  #         if-no-files-found: warn
